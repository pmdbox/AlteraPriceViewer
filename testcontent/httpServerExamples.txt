//package com.stackoverflow.q3732109;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

public class Test {

    public static void main(String[] args) throws Exception {
        HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0);
        server.createContext("/test", new MyHandler());
        server.setExecutor(null); // creates a default executor
        server.start();
    }

    static class MyHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange t) throws IOException {
            String response = "This is the response";
            t.sendResponseHeaders(200, response.length());
            OutputStream os = t.getResponseBody();
            os.write(response.getBytes());
            os.close();
        }
    }

}
#------------------------------------------------------------------------------------

private void startServer()
{
    try
    {
        server = HttpServer.create(new InetSocketAddress(8000), 0);
    }
    catch (IOException e)
    {
        System.err.println("Exception in class : " + e.getMessage());
    }
    server.createContext("/", new indexHandler());
    server.setExecutor(null);
    server.start();
}

private static class indexHandler implements HttpHandler
{
    public void handle(HttpExchange httpExchange) throws IOException
    {
        Headers header = httpExchange.getResponseHeaders();
        header.add("Content-Type", "text/html");
        sendIndexFile(httpExchange);
    }
}

static private void sendIndexFile(HttpExchange httpExchange) throws IOException
{
    File indexFile = new File(getIndexFilePath());
    byte [] indexFileByteArray = new byte[(int)indexFile.length()];

    BufferedInputStream requestStream = new BufferedInputStream(new FileInputStream(indexFile));
    requestStream.read(indexFileByteArray, 0, indexFileByteArray.length);

    httpExchange.sendResponseHeaders(200, indexFile.length());
    OutputStream responseStream = httpExchange.getResponseBody();
    responseStream.write(indexFileByteArray, 0, indexFileByteArray.length);
    responseStream.close();
}

#------------------------------------------------------------------------------------

int port = 8080;
HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);
// ... more server contexts
server.createContext("/static", new StaticFileServer());
And than create the class that will serve your static files.

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;

@SuppressWarnings("restriction")
public class StaticFileServer implements HttpHandler {

    @Override
    public void handle(HttpExchange exchange) throws IOException {
        String fileId = exchange.getRequestURI().getPath();
        File file = getFile(fileId);
        if (file == null) {
            String response = "Error 404 File not found.";
            exchange.sendResponseHeaders(404, response.length());
            OutputStream output = exchange.getResponseBody();
            output.write(response.getBytes());
            output.flush();
            output.close();
        } else {
            exchange.sendResponseHeaders(200, 0);
            OutputStream output = exchange.getResponseBody();
            FileInputStream fs = new FileInputStream(file);
            final byte[] buffer = new byte[0x10000];
            int count = 0;
            while ((count = fs.read(buffer)) >= 0) {
                output.write(buffer, 0, count);
            }
            output.flush();
            output.close();
            fs.close();
        }
    }

    private File getFile(String fileId) {
        // TODO retrieve the file associated with the id
        return null;
    }
}
#------------------------------------------------------------------------------------

import java.io.IOException;
 import java.io.OutputStream;
 import java.net.InetSocketAddress;
 import java.util.HashMap;
 import java.util.Map;

 import com.sun.net.httpserver.HttpExchange;
 import com.sun.net.httpserver.HttpHandler;
 import com.sun.net.httpserver.HttpServer;

 public class SimpleHttpServer2 {

   public static void main(String[] args) throws Exception {
     HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0);
     server.createContext("/info", new InfoHandler());
     server.createContext("/get", new GetHandler());
     server.setExecutor(null); // creates a default executor
     server.start();
     System.out.println("The server is running");
   }

   // http://localhost:8000/info
   static class InfoHandler implements HttpHandler {
     public void handle(HttpExchange httpExchange) throws IOException {
       String response = "Use /get?hello=word&foo=bar to see how to handle url parameters";
       SimpleHttpServer2.writeResponse(httpExchange, response.toString());
     }
   }

   static class GetHandler implements HttpHandler {
     public void handle(HttpExchange httpExchange) throws IOException {
       StringBuilder response = new StringBuilder();
       Map <String,String>parms = SimpleHttpServer2.queryToMap(httpExchange.getRequestURI().getQuery());
       response.append("<html><body>");
       response.append("hello : " + parms.get("hello") + "<br/>");
       response.append("foo : " + parms.get("foo") + "<br/>");
       response.append("</body></html>");
       SimpleHttpServer2.writeResponse(httpExchange, response.toString());
     }
   }

   public static void writeResponse(HttpExchange httpExchange, String response) throws IOException {
     httpExchange.sendResponseHeaders(200, response.length());
     OutputStream os = httpExchange.getResponseBody();
     os.write(response.getBytes());
     os.close();
   }


   /**
    * returns the url parameters in a map
    * @param query
    * @return map
    */
   public static Map<String, String> queryToMap(String query){
     Map<String, String> result = new HashMap<String, String>();
     for (String param : query.split("&")) {
         String pair[] = param.split("=");
         if (pair.length>1) {
             result.put(pair[0], pair[1]);
         }else{
             result.put(pair[0], "");
         }
     }
     return result;
   }

 }

#------------------------------------------------------------------------------------

